[

{
    "id": 0,
    "name": "Selection",
    "commands": [
        {"cid":0, "name":"select(square)", "params":"square - where the piece you want to select is", "description":"selects a piece at the given position if one exists and returns or fale otherwise.", "example":"select(G5)"},
        {"cid":1, "name":"unselect()", "params":"none", "description":"unselects the currently selected piece if one exists and returns false otherwise.", "example":"unselect()"}
    ]
},
{
    "id": 1,
    "name": "Movement",
    "commands": [
        {"cid":0, "name":"move(to)", "params":"to - destination square", "description":"moves the currently selected piece to the given position iff it is a valid move and false otherwise. *only works when a piece is selected", "example":"move(E4)"},
        {"cid":1, "name":"take(to)", "params":"to - destination square", "description":"like move but only works when said move captures another piece. *only works when a piece is selected", "example":"take(D3)"}
    ]
},
{
    "id": 2,
    "name": "Checking",
    "commands": [
        {"cid":1, "name":"isValidMove(to)", "params":"to - destination square", "description":"returns true if the given position is a vlid move for the selected piece if one exists and false otherwise. *only works when a piece is selected", "example":"isValidMove(D7)"},
        {"cid":2, "name":"isValidMove(from, to)", "params":"from - source square, to - destination square", "description":"returns true if the given position is a vlid move for the selected piece if one exists and false otherwise. *only works when a piece is selected", "example":"isValidMove(D7)"},
        {"cid":3, "name":"getValidMoves()", "params":"none", "description":"returns all valid moves for the current position.", "example":"getValidMoves()"},
        {"cid":3, "name":"getValidMoves(square)", "params":"square - the square you want ot see the moves for", "description":"returns all valid moves for the piece at the given square.", "example":"getValidMoves(E2)"},
        {"cid":4, "name":"showValidMoves()", "params":"none", "description":"shows all the valid moves of the selected piece if one exists and false otherwise.", "example":"showValidMoves()"},
        {"cid":5, "name":"hideValidMoves()", "params":"none", "description":"hides all the valid moves of the selected piece if one exists and false otherwise.", "example":"hideValidMoves()"},
        {"cid":6, "name":"showMoveHistory()", "params":"none", "description":"prints the move history for both players in the terminal or returns false if no moves have been played.", "example":"showMoveHistory()"},
        {"cid":7, "name":"showWhiteMoves()", "params":"none", "description":"prints the move history for white in the terminal or returns false if no moves have been played.", "example":"showWhiteHistory()"},
        {"cid":8, "name":"showBlackMoves()", "params":"none", "description":"prints the move history for black in the terminal or returns false if no moves have been played.", "example":"showBlackHistory()"}
    ]
},
{
    "id": 3,
    "name": "Gameplay",
    "commands": [
        {"cid":0, "name":"startGame()", "params":"none", "description":"initiates the start of a game.", "example":"startGame()"},
        {"cid":1, "name":"offerDraw()", "params":"none", "description":"offers a draw to the opponent.", "example":"offerDraw()"},
        {"cid":2, "name":"resign()", "params":"none", "description":"resigns the game.", "example":"resiasgdfuasoidgn()"},
        {"cid":3, "name":"resetBoard()", "params":"none", "description":"resets the board, can only be called when the previous game has finished.", "example":"resetBoard()"},
        {"cid":4, "name":"getFEN()", "params":"none", "description":"returns the FEN string denoting the current state of the game.", "example":"getFEN()"},
        {"cid":5, "name":"setFromFEN(fen)", "params":"fen - FEN formatted string", "description":"Sets the board to a given position.", "example":"setFromFEN(r1bqkbnr/ppp1pB1p/2n5/4N2p/4p3/8/PPPP1PPP/RNB1K2R b KQkq - 0 6)"}
    ]
},
{
    "id": 4,
    "name": "Review",
    "commands": [
        {"cid":0, "name":"goToPrevMove()", "params":"none", "description":"Displays the game position at the previous sequential move.", "example":"goToPrevMove()"},
        {"cid":1, "name":"goToNextMove()", "params":"none", "description":"Displays the game position at the next sequential move.", "example":"goToNextMove()"},
        {"cid":2, "name":"goToFirstMove()", "params":"none", "description":"Displays the initial game position.", "example":"goToFirstMove()"},
        {"cid":3, "name":"goToLastMove()", "params":"none", "description":"Displays the final or current game position.", "example":"goToLastMove()"}
    ]
},
{
    "id": 5,
    "name": "Scripting",
    "commands": [
        {"cid":0, "name":"runScript(scriptName)", "params":"scriptName - name of the script to run", "description":"runs a saved script if one exists under the given name. no delay is used.", "example":"runScript(ponziani)"},
        {"cid":1, "name":"testScript()", "params":"none", "description":"runs the script currently in the editor. * only available on script editor page.", "example":"testScript()"},
        {"cid":2, "name":"saveScript(scriptName)", "params":"scriptName - name to save the script under", "description":"saves the script under a certain name.", "example":"saveScript(ponziani)"},
        {"cid":3, "name":"loadScript(scriptName)", "params":"scriptName - name of script to load", "description":"loads the script saved under a certain name into the editor. * only available on script editor page", "example":"loadScript(ponziani)"},
        {"cid":4, "name":"removeScript(scriptName)", "params":"scriptName - name of script to remove", "description":"deletes the script saved under a certain name. * only available on script editor page and cannot be undone", "example":"removeScript(ponziani)"},
        {"cid":5, "name":"listScripts()", "params":"none", "description":"shows list of saved scripts", "example":"listScripts()"}
    ]
},
{
    "id": 6,
    "name": "Settings",
    "commands": [
        {"cid":0, "name":"setBoardTheme(theme)", "params":"theme - the name of the theme you want to use (dark, light, purple, blue, green, or orange)", "description":"changes the color theme of the board.", "example":"setBoardTheme(dark)"},
        {"cid":1, "name":"setBotDepth(depth)", "params":"depth - the new depth for the bot to operate at from 0 to 4 inclusive", "description":"changes how many moves ahead the bot will look.", "example":"setBotDepth(4)"},
        {"cid":2, "name":"playAs(color)", "params":"color - the color you want to start as (w or b)", "description":"sets the color you play as.", "example":"playAs(b)"},
        {"cid":3, "name":"toggleErrors()", "params":"none", "description":"toggle error codes to make things more difficult to troubleshoot.", "example":"toggleErrors()"}
    ]
},
{
    "id": 7,
    "name": "Other",
    "commands": [
        {"cid":0, "name":"help(method)", "params":"method signature without parameters", "description":"displays use case information for the given method.", "example":"help(take)"},
        {"cid":1, "name":"clear()", "params":"none", "description":"clears the terminal.", "example":"clear()"}
    ]
}

]