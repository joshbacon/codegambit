[

{
    "id": 0,
    "section": "Selection",
    "methods": [
        {"mid":0, "method":"select(square)", "params":"square - where the piece you want to select is", "desc":"selects a piece at the given position if one exists and returns or fale otherwise.", "example":"select(G5)"},
        {"mid":1, "method":"unselect()", "params":"none", "desc":"unselects the currently selected piece if one exists and returns false otherwise.", "example":"unselect()"}
    ]
},
{
    "id": 1,
    "section": "Movement",
    "methods": [
        {"mid":0, "method":"move(to)", "params":"to - destination square", "desc":"moves the currently selected piece to the given position iff it is a valid move and false otherwise. *only works when a piece is selected", "example":"move(E4)"},
        {"mid":1, "method":"take(to)", "params":"to - destination square", "desc":"like move but only works when said move captures another piece. *only works when a piece is selected", "example":"take(D3)"}
    ]
},
{
    "id": 2,
    "section": "Checking",
    "methods": [
        {"mid":1, "method":"isValidMove(to)", "params":"to - destination square", "desc":"returns true if the given position is a vlid move for the selected piece if one exists and false otherwise. *only works when a piece is selected", "example":"isValidMove(D7)"},
        {"mid":2, "method":"getValidMoves()", "params":"none", "desc":"returns all valid moves for the current position; concatenate with .[square] to get only the valid moves for a given piece.", "example":"getValidMove().e2"},
        {"mid":3, "method":"showValidMoves()", "params":"none", "desc":"shows all the valid moves of the selected piece if one exists and false otherwise.", "example":"showValidMoves()"},
        {"mid":4, "method":"hideValidMoves()", "params":"none", "desc":"hides all the valid moves of the selected piece if one exists and false otherwise.", "example":"hideValidMoves()"},
        {"mid":5, "method":"showMoveHistory()", "params":"none", "desc":"prints the move history for both players in the terminal or returns false if no moves have been played.", "example":"showMoveHistory()"},
        {"mid":6, "method":"showWhiteMoves()", "params":"none", "desc":"prints the move history for white in the terminal or returns false if no moves have been played.", "example":"showWhiteHistory()"},
        {"mid":7, "method":"showBlackMoves()", "params":"none", "desc":"prints the move history for black in the terminal or returns false if no moves have been played.", "example":"showBlackHistory()"}
    ]
},
{
    "id": 3,
    "section": "Gameplay",
    "methods": [
        {"mid":0, "method":"startGame()", "params":"none", "desc":"initiates the start of a game.", "example":"startGame()"},
        {"mid":1, "method":"offerDraw()", "params":"none", "desc":"offers a draw to the opponent.", "example":"offerDraw()"},
        {"mid":2, "method":"resign()", "params":"none", "desc":"resigns the game.", "example":"resiasgdfuasoidgn()"},
        {"mid":3, "method":"resetBoard()", "params":"none", "desc":"resets the board, can only be called when the previous game has finished.", "example":"resetBoard()"},
        {"mid":4, "method":"getFEN()", "params":"none", "desc":"returns the FEN string denoting the current state of the game.", "example":"getFEN()"},
        {"mid":5, "method":"setFromFEN()", "params":"none", "desc":"sets the board to the given position, can only be called when there is not an onging game.", "example":"setFromFEN(rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1)"}
    ]
},
{
    "id": 4,
    "section": "Settings",
    "methods": [
        {"mid":0, "method":"setBoardTheme(theme)", "params":"theme - the name of the theme you want to use (bDark, bLight, bPurple, bBlue, bGreen, or bOrange)", "desc":"changes the color theme of the board.", "example":"setBoardTheme(dark)"},
        {"mid":1, "method":"setBotDepth(depth)", "params":"depth - the new depth for the bot to operate at (0-6)", "desc":"changes how many moves ahead the bot will look.", "example":"setBotDepth(4)"},
        {"mid":2, "method":"playAs(color)", "params":"color - the color you want to start as (w or b)", "desc":"sets the color you play as.", "example":"playAs(b)"}
    ]
},
{
    "id": 5,
    "section": "Other",
    "methods": [
        {"mid":0, "method":"help(method)", "params":"method signature without parameters", "desc":"displays use case information for the given method so you don't have to come to the docs.", "example":"help(take)"},
        {"mid":1, "method":"clear()", "params":"none", "desc":"clears the terminal.", "example":"clear()"},
        {"mid":2, "method":"writeGame()", "params":"none", "desc":"saves the current game position of a single player game.", "example":"writeGame()"}
    ]
}

]